{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/actions/OmimActions.js","app/actions/StatsActions.js","app/alt.js","app/components/App.js","app/components/Home.js","app/components/Navbar.js","app/components/Omim.js","app/components/Phenotypes.js","app/components/Stats.js","app/main.js","app/routes.js","app/stores/OmimStore.js","app/stores/StatsStore.js","node_modules/debug/src/browser.js","node_modules/debug/src/debug.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/loadjs/dist/loadjs.umd.js","node_modules/ms/index.js","node_modules/process/browser.js","node_modules/react-google-charts/lib/components/Chart.js","node_modules/react-google-charts/lib/components/GoogleChartLoader.js","node_modules/react-google-charts/lib/constants/DEFAULT_CHART_COLORS.js","node_modules/react-google-charts/lib/index.js","node_modules/warning/browser.js"],"names":[],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnnrpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import alt from '../alt';\r\n\r\nclass OmimActions {\r\n  constructor() {\r\n    this.generateActions(\r\n      'getOmimGeneSuccess',\r\n      'getOmimGeneWithPhenotypesSuccess',\r\n      'getSnpSuccess',\r\n      'getOmimGeneFail'\r\n    );\r\n  }\r\n\r\n  getOmimGenes() {\r\n  \t$.ajax({ url: '/api/omim', data:{} })\r\n  \t\t.done((data) => {\r\n  \t\t\tthis.actions.getOmimGeneSuccess(data);\r\n  \t\t})\r\n  \t\t.fail((jqXhr) => {\r\n  \t\t\tthis.actions.getOmimGeneFail(jqXhr);\r\n  \t\t});\t\r\n\t}\r\n\r\n  getOmimGenesWithPhenotypes() {\r\n    $.ajax({ url: '/api/omimWithPhenotype/', data:{} })\r\n      .done((data) => {\r\n        this.actions.getOmimGeneWithPhenotypesSuccess(data);\r\n      });\r\n  }\r\n\r\n  getSnp() {\r\n    $.ajax({ url: '/api/snp/', data:{} })\r\n      .done((data) => {\r\n        this.actions.getSnpSuccess(data);\r\n      });\r\n  }\r\n}\r\n\r\nexport default alt.createActions(OmimActions);","import alt from '../alt';\n\nclass StatsActions {\n  constructor() {\n    this.generateActions(\n      'getOmimGeneSuccess',\n      'getOmimGeneWithPhenotypesSuccess',\n      'getOmimGeneFail'\n    );\n  }\n\n  getOmimGenes() {\n  \t$.ajax({ url: '/api/omim', data:{} })\n  \t\t.done((data) => {\n  \t\t\tthis.actions.getOmimGeneSuccess(data);\n  \t\t})\n  \t\t.fail((jqXhr) => {\n  \t\t\tthis.actions.getOmimGeneFail(jqXhr);\n  \t\t});\t\n\t}\n\n  getOmimGenesWithPhenotypes() {\n    $.ajax({ url: '/api/omimWithPhenotype/', data:{} })\n      .done((data) => {\n        this.actions.getOmimGeneWithPhenotypesSuccess(data);\n      });\n  }\n}\n\nexport default alt.createActions(StatsActions);","import Alt from 'alt';\r\n\r\nexport default new Alt();","import React from 'react';\r\nimport Navbar from './Navbar';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Navbar history={this.props.history} />\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport OmimStore from '../stores/OmimStore';\r\nimport OmimActions from '../actions/OmimActions';\r\nimport Omim from './Omim';\r\n\r\nclass Home extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = OmimStore.getState();\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n  \tOmimStore.listen(this.onChange);\r\n    OmimActions.getOmimGenes();\r\n    OmimActions.getOmimGenesWithPhenotypes();\r\n    OmimActions.getSnp();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  \tOmimStore.unlisten(this.onChange);\r\n  }\r\n\r\n\r\n  onChange(state) {\r\n    this.setState(state);\r\n  }\r\n\r\n  mapPhenotypeList(list) {\r\n  \tif (list) {\r\n\t  \treturn list.map((item, index) => {\r\n\t  \t\treturn (\r\n\t  \t\t\t<div className='well well-sm' key={index}>\r\n\t  \t\t\t\t<div><strong>Phenotype Name:</strong> {item.phenotypeMap.phenotype}</div>\r\n\t  \t\t\t\t<div><strong>Phenotype MIM Number:</strong> <a href={`https://omim.org/entry/${item.phenotypeMap.phenotypeMimNumber}`} target='_blank'>{item.phenotypeMap.phenotypeMimNumber}</a></div>\r\n\t  \t\t\t\t<div><strong>Phenotype Inheritance:</strong> {item.phenotypeMap.phenotypeInheritance}</div>\r\n\t  \t\t\t</div>\r\n\t\t\t)\r\n\t  \t});\r\n  \t}\r\n  }\r\n\r\n  mapSnpList(list) {\r\n  \tif (list && list.constructor === Array) {\r\n\t  \treturn list.map((item, index) => {\r\n\t  \t\treturn (\r\n\t  \t\t\t<li className='well well-sm' key={index}>\r\n\t  \t\t\t\t<a href={`https://www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs=${item}`} target='_blank'>{item}</a>\r\n\t  \t\t\t</li>\r\n\t\t\t)\r\n\t  \t});\r\n  \t}\r\n  \telse if (list){\r\n  \t\treturn (\r\n\t  \t\t\t<li className='well well-sm' key={list}>\r\n\t  \t\t\t\t<a href={`https://www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs=${list}`} target='_blank'>{list}</a>\r\n\t  \t\t\t</li>\r\n\t\t)\r\n  \t}\r\n  }\r\n\r\n  getPhenotypeCount(list) {\r\n  \tif (list){\r\n  \t\treturn list.length;\r\n  \t}\r\n  \telse return 0;\r\n  }\r\n\r\n\trender() {\r\n\t\tvar geneNodes = this.state.genes.map((gene, index) => {\r\n\t\t\tconst geneObject = JSON.parse(gene.contents);\r\n\t\t\tconst geneMap = geneObject.omim.listResponse.geneMapList[0].geneMap;\r\n\t\t\tconst snpContents = JSON.parse(gene.snpContents);\r\n\t\t  return (\r\n\t\t    <div className='panel panel-primary' key={gene._id}>\r\n\t\t    \t<div className='panel-heading'>{geneMap.geneName}</div>\r\n\t\t    \t<div className='panel-body'>\r\n\t\t    \t\t<ul className='list'>\r\n  \t\t\t\t\t\t<li><strong>Gene Name: </strong>{geneMap.geneName}</li>\r\n  \t\t\t\t\t\t<li><strong>Gene Symbols: </strong>{geneMap.geneSymbols}</li>\r\n  \t\t\t\t\t\t<li><strong>MIM Number: </strong><a href={`https://omim.org/entry/${geneMap.mimNumber}`} target='_blank'>{geneMap.mimNumber}</a></li>\r\n  \t\t\t\t\t\t<li><strong>Known Phenotypes: </strong><span className='badge'>{this.getPhenotypeCount(geneMap.phenotypeMapList)}</span></li>\r\n  \t\t\t\t\t\t\r\n  \t\t\t\t\t\t<p>{this.mapPhenotypeList(geneMap.phenotypeMapList)}</p>\r\n  \t\t\t\t\t\t<li><strong>Known SNPs: </strong><span className='badge'>{gene.snpCount}</span></li>\r\n  \t\t\t\t\t\t<li><strong>Known Pathogenic SNPs: </strong><span className='badge badge-danger'>{gene.snpPathogenicCount}</span></li>\r\n  \t\t\t\t\t\t<p><ul className='list-inline'>{this.mapSnpList(snpContents.IdList.Id)}</ul></p>\r\n  \t\t\t\t\t</ul>\r\n  \t\t\t\t\t\r\n\t\t    \t</div>\r\n\t\t    </div>\r\n\t\t  );\r\n\t\t});\r\n\t\t\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='alert alert-info'>\r\n\t\t\t\t\tMitochondrial Disorders And Genetic Variations\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<ul className='list-group'>\r\n\t\t\t\t\t\t<li className='list-group-item'><strong>Total genes: </strong>{this.state.genes.length}</li>\r\n\t\t\t\t\t\t<li className='list-group-item'><strong>Total genes with known phenotypes: </strong>{this.state.genesWithPhenotypes.length}</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t{geneNodes}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport {Link} from 'react-router';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);  \n  }\n\n  render() {\n    return (\n      <nav className='navbar navbar-default navbar-static-top'>\n        <div className='navbar-header'>\n          <button type='button' className='navbar-toggle collapsed' data-toggle='collapse' data-target='#navbar'>\n            <span className='sr-only'>Toggle navigation</span>\n            <span className='icon-bar'></span>\n            <span className='icon-bar'></span>\n            <span className='icon-bar'></span>\n          </button>\n          <Link to='/' className='navbar-brand'>\n            DNA\n            <span className='badge badge-up badge-danger'>mt</span>\n          </Link>\n        </div>\n        <div id='navbar' className='navbar-collapse collapse'>\n          <ul className='nav navbar-nav'>\n            <li><Link to='/'>Home</Link></li>\n            <li><Link to='/stats'>Stats</Link></li>\n            <li className='dropdown'>\n              <Link to='/phenotypes'>Known Phenotypes </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","import React, {PropTypes} from 'react'\r\n\r\nconst Omim = ({omim, onHeadingClick, headingClass}) => {\r\n  return (\r\n    <div>{omim}</div>\r\n  );\r\n}\r\n\r\nexport default Omim;\r\n","import React from 'react';\nimport OmimStore from '../stores/OmimStore';\nimport OmimActions from '../actions/OmimActions';\nimport Omim from './Omim';\n\nclass Home extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = OmimStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n  \tOmimStore.listen(this.onChange);\n    OmimActions.getOmimGenesWithPhenotypes();\n    OmimActions.getSnp();\n  }\n\n  componentWillUnmount() {\n  \tOmimStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  mapPhenotypeList(list) {\n  \tif (list) {\n\t  \treturn list.map((item, index) => {\n\t  \t\treturn (\n\t  \t\t\t<div className='well well-sm' key={index}>\n\t  \t\t\t\t<div><strong>Phenotype Name:</strong> {item.phenotypeMap.phenotype}</div>\n\t  \t\t\t\t<div><strong>Phenotype MIM Number:</strong> <a href={`https://omim.org/entry/${item.phenotypeMap.phenotypeMimNumber}`} target='_blank'>{item.phenotypeMap.phenotypeMimNumber}</a></div>\n\t  \t\t\t\t<div><strong>Phenotype Inheritance:</strong> {item.phenotypeMap.phenotypeInheritance}</div>\n\t  \t\t\t</div>\n\t\t\t)\n\t  \t});\n  \t}\n  }\n\n  getPhenotypeCount(list) {\n  \tif (list){\n  \t\treturn list.length;\n  \t}\n  \telse return 0;\n  }\n\n  mapSnpList(list) {\n  \tif (list && list.constructor === Array) {\n\t  \treturn list.map((item, index) => {\n\t  \t\treturn (\n\t  \t\t\t<li className='well well-sm' key={index}>\n\t  \t\t\t\t<a href={`https://www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs=${item}`} target='_blank'>{item}</a>\n\t  \t\t\t</li>\n\t\t\t)\n\t  \t});\n  \t}\n  \telse if (list){\n  \t\treturn (\n\t  \t\t\t<li className='well well-sm' key={list}>\n\t  \t\t\t\t<a href={`https://www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs=${list}`} target='_blank'>{list}</a>\n\t  \t\t\t</li>\n\t\t)\n  \t}\n  }\n\n\trender() {\n\t\tvar geneNodes = this.state.genesWithPhenotypes.map((gene, index) => {\n\t\t\tconst geneObject = JSON.parse(gene.contents);\n\t\t\tconst geneMap = geneObject.omim.listResponse.geneMapList[0].geneMap;\n\t\t\tconst snpContents = JSON.parse(gene.snpContents);\n\t\t  return (\n\t\t    <div className='panel panel-primary' key={gene._id}>\n\t\t    \t<div className='panel-heading'>{geneMap.geneName}</div>\n\t\t    \t<div className='panel-body'>\n\t\t    \t\t<ul className='list'>\n  \t\t\t\t\t\t<li><strong>Gene Name: </strong>{geneMap.geneName}</li>\n  \t\t\t\t\t\t<li><strong>Gene Symbols: </strong>{geneMap.geneSymbols}</li>\n  \t\t\t\t\t\t<li><strong>MIM Number: </strong><a href={`https://omim.org/entry/${geneMap.mimNumber}`} target='_blank'>{geneMap.mimNumber}</a></li>\n  \t\t\t\t\t\t<li><strong>Known Phenotypes: </strong><span className='badge'>{this.getPhenotypeCount(geneMap.phenotypeMapList)}</span></li>\n  \t\t\t\t\t\t\n  \t\t\t\t\t\t<p>{this.mapPhenotypeList(geneMap.phenotypeMapList)}</p>\n  \t\t\t\t\t\t<li><strong>Known SNPs: </strong><span className='badge'>{gene.snpCount}</span></li>\n  \t\t\t\t\t\t<li><strong>Known Pathogenic SNPs: </strong><span className='badge badge-danger'>{gene.snpPathogenicCount}</span></li>\n  \t\t\t\t\t\t<p><ul className='list-inline'>{this.mapSnpList(snpContents.IdList.Id)}</ul></p>\n  \t\t\t\t\t</ul>\n  \t\t\t\t\t\n\t\t    \t</div>\n\t\t    </div>\n\t\t  );\n\t\t});\n\t\t\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='alert alert-info'>\n\t\t\t\t\tMitochondrial Disorders And Genetic Variations\n\t\t\t\t</div>\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<ul className='list-group'>\n\t\t\t\t\t\t<li className='list-group-item'><strong>Total genes with known phenotypes: </strong>{this.state.genesWithPhenotypes.length}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t{geneNodes}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Home;","import React from 'react';\nimport { Chart } from 'react-google-charts';\nimport StatsStore from '../stores/StatsStore';\nimport StatsActions from '../actions/StatsActions';\n \nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = StatsStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    StatsStore.listen(this.onChange);\n    StatsActions.getOmimGenes();\n    StatsActions.getOmimGenesWithPhenotypes();\n  }\n\n  componentWillUnmount() {\n    StatsStore.unlisten(this.onChange);\n    this.setState({data : [\n          ['Type', 'Count', {role: 'annotation'}]\n        ]});\n  }\n\n\n  onChange(state) {\n    this.setState(state);\n    this.setState({data : [...this.state.data, ['Total Genes', this.state.genes.length, this.state.genes.length]]});\n    this.setState({data : [...this.state.data, ['Genes with known Phenotypes', this.state.genesWithPhenotypes.length, this.state.genesWithPhenotypes.length]]});\n  }\n\n  render() {\n    const totalGenes = 0;\n    const totalGenesWithPhenotypes = 0;\n\n    return (\n      <div className={'my-pretty-chart-container'}>\n        <Chart\n          chartType=\"ColumnChart\"\n          data={this.state.data}\n          options={{}}\n          graph_id=\"BarChart\"\n          width=\"50%\"\n          \n          legend_toggle\n        />\n      </div>\n    );\n  }\n}","import React from 'react';\r\nimport Router from 'react-router';\r\nimport ReactDOM from 'react-dom';\r\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\r\nimport routes from './routes';\r\n\r\nlet history = createBrowserHistory();\r\n\r\nReactDOM.render(<Router history={history}>{routes}</Router>, document.getElementById('app'));","import React from 'react';\r\nimport {Route} from 'react-router';\r\nimport App from './components/App';\r\nimport Home from './components/Home';\r\nimport Phenotype from './components/Phenotypes';\r\nimport Stats from './components/Stats';\r\n\r\nexport default (\r\n  <Route component={App}>\r\n    <Route path='/' component={Home} />\r\n  \t<Route path='/phenotypes' component={Phenotype} />\r\n  \t<Route path='/stats' component={Stats} />\r\n  </Route>\r\n);","import alt from '../alt';\r\nimport GetOmimActions from '../actions/OmimActions';\r\n\r\nclass OmimStore {\r\n  \r\n  constructor() {\r\n    this.bindActions(GetOmimActions);\r\n    this.genes = [];\r\n    this.genesWithPhenotypes = [];\r\n    this.snp = [];\r\n    this.data = [\r\n        \t['Type', 'Count', {role: 'annotation'}]\r\n        ];\r\n  }\r\n\r\n  onGetOmimGeneSuccess(data){\r\n  \tthis.genes = data;\r\n  }\r\n\r\n  onGetOmimGeneWithPhenotypesSuccess(data) {\r\n  \tthis.genesWithPhenotypes = data;\r\n  }\r\n\r\n  onGetSnpSuccess(data){\r\n  \tthis.snp = data;\r\n  }\r\n}\r\n\r\nexport default alt.createStore(OmimStore);","\nimport alt from '../alt';\nimport GetStatsActions from '../actions/StatsActions';\n\nclass StatsStore {\n  \n  constructor() {\n    this.bindActions(GetStatsActions);\n    this.genes = [];\n    this.genesWithPhenotypes = [];\n    \n  }\n\n  onGetOmimGeneSuccess(data){\n  \tthis.genes = data;\n  }\n\n  onGetOmimGeneWithPhenotypesSuccess(data) {\n  \tthis.genesWithPhenotypes = data;\n  }\n}\n\nexport default alt.createStore(StatsStore);\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window && typeof window.process !== 'undefined' && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document && 'WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window && window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  try {\n    return exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (typeof process !== 'undefined' && 'env' in process) {\n    return process.env.DEBUG;\n  }\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = path.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // success and error callbacks\n    if (pathsNotFound.length) (args.error || devnull)(pathsNotFound);\n    else (args.success || devnull)();\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n    else (args.success || devnull)();\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","/**\n * Helpers.\n */\n\nvar s = 1000\nvar m = s * 60\nvar h = m * 60\nvar d = h * 24\nvar y = d * 365.25\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {}\n  var type = typeof val\n  if (type === 'string' && val.length > 0) {\n    return parse(val)\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ?\n\t\t\tfmtLong(val) :\n\t\t\tfmtShort(val)\n  }\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))\n}\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str)\n  if (str.length > 10000) {\n    return\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)\n  if (!match) {\n    return\n  }\n  var n = parseFloat(match[1])\n  var type = (match[2] || 'ms').toLowerCase()\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n\n    default:\n      return undefined\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd'\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h'\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm'\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's'\n  }\n  return ms + 'ms'\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms'\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's'\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nexports.__esModule = true;\nexports.default = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _DEFAULT_CHART_COLORS = require('../constants/DEFAULT_CHART_COLORS');\n\nvar _DEFAULT_CHART_COLORS2 = _interopRequireDefault(_DEFAULT_CHART_COLORS);\n\nvar _GoogleChartLoader = require('./GoogleChartLoader');\n\nvar _GoogleChartLoader2 = _interopRequireDefault(_GoogleChartLoader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint react/forbid-prop-types: \"off\" */\n\n\nvar debug = new _debug2.default('react-google-charts:Chart');\n\nvar uniqueID = 0;\n\nvar generateUniqueID = function generateUniqueID() {\n  uniqueID += 1;\n  return 'reactgooglegraph-' + uniqueID;\n};\n\nvar Chart = function (_React$Component) {\n  _inherits(Chart, _React$Component);\n\n  function Chart(props) {\n    _classCallCheck(this, Chart);\n\n    debug('constructor', props);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = { graphID: props.graph_id || generateUniqueID() };\n    _this.chart = null;\n    _this.wrapper = null;\n    _this.hidden_columns = {};\n    _this.dataTable = [];\n\n    _this.debounce = _this.debounce.bind(_this);\n    _this.onResize = _this.onResize.bind(_this);\n    _this.drawChart = _this.drawChart.bind(_this);\n    _this.togglePoints = _this.togglePoints.bind(_this);\n    _this.buildDataTableFromProps = _this.buildDataTableFromProps.bind(_this);\n    _this.listenToChartEvents = _this.listenToChartEvents.bind(_this);\n    _this.addChartActions = _this.addChartActions.bind(_this);\n    _this.updateDataTable = _this.updateDataTable.bind(_this);\n    _this.onSelectToggle = _this.onSelectToggle.bind(_this);\n    _this.addSourceColumnTo = _this.addSourceColumnTo.bind(_this);\n    _this.restoreColorTo = _this.restoreColorTo.bind(_this);\n    _this.hideColumn = _this.hideColumn.bind(_this);\n    return _this;\n  }\n\n  Chart.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    debug('componentDidMount');\n    if (typeof window === 'undefined') {\n      return;\n    }\n    if (this.props.loadCharts) {\n      _GoogleChartLoader2.default.init(this.props.chartPackages, this.props.chartVersion).then(function () {\n        _this2.drawChart();\n      });\n      this.onResize = this.debounce(this.onResize, 200);\n      window.addEventListener('resize', this.onResize);\n    } else {\n      this.drawChart();\n    }\n  };\n\n  Chart.prototype.componentDidUpdate = function componentDidUpdate() {\n    var _this3 = this;\n\n    debug('componentDidUpdate');\n    if (!this.props.loadCharts) {\n      this.drawChart();\n    } else if (_GoogleChartLoader2.default.isLoading) {\n      _GoogleChartLoader2.default.initPromise.then(function () {\n        _this3.drawChart();\n      });\n    } else if (_GoogleChartLoader2.default.isLoaded) {\n      this.drawChart();\n    }\n  };\n\n  Chart.prototype.componentWillUnmount = function componentWillUnmount() {\n    try {\n      if (window) {\n        if (window.google && window.google.visualization) {\n          window.google.visualization.events.removeAllListeners(this.wrapper);\n        }\n        window.removeEventListener('resize', this.onResize);\n      }\n    } catch (err) {\n      return;\n    }\n  };\n\n  Chart.prototype.onResize = function onResize() {\n    debug('Chart::onResize');\n    this.drawChart();\n  };\n\n  Chart.prototype.onSelectToggle = function onSelectToggle() {\n    debug('onSelectToggle');\n    var selection = this.chart.getSelection();\n    if (selection.length > 0) {\n      if (selection[0].row == null) {\n        var column = selection[0].column;\n        this.togglePoints(column);\n      }\n    }\n  };\n\n  Chart.prototype.getColumnColor = function getColumnColor(columnIndex) {\n    if (this.props.options.colors) {\n      if (this.props.options.colors[columnIndex]) {\n        return this.props.options.colors[columnIndex];\n      }\n    } else if (columnIndex in _DEFAULT_CHART_COLORS2.default) {\n      return _DEFAULT_CHART_COLORS2.default[columnIndex];\n    }\n    return _DEFAULT_CHART_COLORS2.default[0];\n  };\n\n  Chart.prototype.buildDataTableFromProps = function buildDataTableFromProps() {\n    debug('buildDataTableFromProps', this.props);\n\n    if (this.props.diffdata) {\n      var diffdata = this.props.diffdata;\n      var oldData = window.google.visualization.arrayToDataTable(diffdata.old);\n      var newData = window.google.visualization.arrayToDataTable(diffdata.new);\n      // must take computeDiff from prototypes since not available with charts early in process\n      var computeDiff = window.google.visualization[this.props.chartType].prototype.computeDiff;\n      var chartDiff = computeDiff(oldData, newData);\n      return chartDiff;\n    }\n\n    if (this.props.data === null && this.props.rows.length === 0 && !this.props.allowEmptyRows) {\n      throw new Error(\"Can't build DataTable from rows and columns: rows array in props is empty\");\n    } else if (this.props.data === null && this.props.columns.length === 0) {\n      throw new Error(\"Can't build DataTable from rows and columns: columns array in props is empty\");\n    }\n    if (this.props.data !== null) {\n      try {\n        this.wrapper.setDataTable(this.props.data);\n        var _dataTable = this.wrapper.getDataTable();\n        return _dataTable;\n      } catch (err) {\n        // console.error('Failed to set DataTable from data props ! ', err);\n        throw new Error('Failed to set DataTable from data props ! ', err);\n      }\n    }\n\n    var dataTable = new window.google.visualization.DataTable();\n    this.props.columns.forEach(function (column) {\n      dataTable.addColumn(column);\n    });\n    dataTable.addRows(this.props.rows);\n    if (this.props.numberFormat) {\n      var formatter = new window.google.visualization.NumberFormat(this.props.numberFormat.options);\n      formatter.format(dataTable, this.props.numberFormat.column);\n    }\n\n    if (this.props.dateFormat) {\n      var dateFormat = new window.google.visualization.DateFormat(this.props.dateFormat.options);\n      this.props.dateFormat.columns.forEach(function (columnIdx) {\n        dateFormat.format(dataTable, columnIdx);\n      });\n    }\n\n    return dataTable;\n  };\n\n  Chart.prototype.updateDataTable = function updateDataTable() {\n    debug('updateDataTable');\n    window.google.visualization.errors.removeAll(document.getElementById(this.wrapper.getContainerId()));\n    this.dataTable.removeRows(0, this.dataTable.getNumberOfRows());\n    this.dataTable.removeColumns(0, this.dataTable.getNumberOfColumns());\n    this.dataTable = this.buildDataTableFromProps();\n    return this.dataTable;\n  };\n\n  Chart.prototype.drawChart = function drawChart() {\n    var _this4 = this;\n\n    debug('drawChart', this);\n    if (!this.wrapper) {\n      var chartConfig = {\n        chartType: this.props.chartType,\n        options: this.props.options,\n        containerId: this.state.graphID\n      };\n      this.wrapper = new window.google.visualization.ChartWrapper(chartConfig);\n      this.dataTable = this.buildDataTableFromProps();\n      this.wrapper.setDataTable(this.dataTable);\n\n      window.google.visualization.events.addOneTimeListener(this.wrapper, 'ready', function () {\n        _this4.chart = _this4.wrapper.getChart();\n        _this4.listenToChartEvents();\n        _this4.addChartActions();\n      });\n    } else {\n      this.updateDataTable();\n      this.wrapper.setDataTable(this.dataTable);\n      // this.wrapper.setChartType(this.props.chartType)\n      this.wrapper.setOptions(this.props.options);\n      if (this.wrapper.getChartType() !== this.props.chartType) {\n        window.google.visualization.events.removeAllListeners(this.wrapper);\n        this.wrapper.setChartType(this.props.chartType);\n        var self = this;\n        window.google.visualization.events.addOneTimeListener(this.wrapper, 'ready', function () {\n          self.chart = self.wrapper.getChart();\n          self.listenToChartEvents.call(self);\n        });\n      }\n    }\n    this.wrapper.draw();\n  };\n\n  Chart.prototype.addChartActions = function addChartActions() {\n    var _this5 = this;\n\n    debug('addChartActions', this.props.chartActions);\n    if (this.props.chartActions === null) {\n      return;\n    }\n    this.props.chartActions.forEach(function (chartAction) {\n      _this5.chart.setAction({\n        id: chartAction.id,\n        text: chartAction.text,\n        action: chartAction.action.bind(_this5, _this5.chart)\n      });\n    });\n  };\n\n  Chart.prototype.listenToChartEvents = function listenToChartEvents() {\n    var _this6 = this;\n\n    debug('listenToChartEvents', this.props.legend_toggle, this.props.chartEvents);\n    if (this.props.legend_toggle) {\n      window.google.visualization.events.addListener(this.wrapper, 'select', this.onSelectToggle);\n    }\n    this.props.chartEvents.forEach(function (chartEvent) {\n      if (chartEvent.eventName === 'ready') {\n        chartEvent.callback(_this6);\n      } else {\n        (function (event) {\n          window.google.visualization.events.addListener(_this6.chart, event.eventName, function (e) {\n            event.callback(_this6, e);\n          });\n        })(chartEvent);\n      }\n    });\n  };\n\n  Chart.prototype.buildColumnFromSourceData = function buildColumnFromSourceData(columnIndex) {\n    debug('buildColumnFromSourceData', columnIndex);\n    return {\n      label: this.dataTable.getColumnLabel(columnIndex),\n      type: this.dataTable.getColumnType(columnIndex),\n      sourceColumn: columnIndex\n    };\n  };\n\n  Chart.prototype.buildEmptyColumnFromSourceData = function buildEmptyColumnFromSourceData(columnIndex) {\n    debug('buildEmptyColumnFromSourceData', columnIndex);\n    return {\n      label: this.dataTable.getColumnLabel(columnIndex),\n      type: this.dataTable.getColumnType(columnIndex),\n      calc: function calc() {\n        return null;\n      }\n    };\n  };\n\n  Chart.prototype.addEmptyColumnTo = function addEmptyColumnTo(columns, columnIndex) {\n    debug('addEmptyColumnTo', columns, columnIndex);\n    var emptyColumn = this.buildEmptyColumnFromSourceData(columnIndex);\n    columns.push(emptyColumn);\n  };\n\n  Chart.prototype.hideColumn = function hideColumn(colors, columnIndex) {\n    debug('hideColumn', colors, columnIndex);\n    if (!this.isHidden(columnIndex)) {\n      this.hidden_columns[columnIndex] = { color: this.getColumnColor(columnIndex - 1) };\n    }\n    colors.push('#CCCCCC');\n  };\n\n  Chart.prototype.addSourceColumnTo = function addSourceColumnTo(columns, columnIndex) {\n    debug('addSourceColumnTo', columns, columnIndex);\n    var sourceColumn = this.buildColumnFromSourceData(columnIndex);\n    columns.push(sourceColumn);\n  };\n\n  Chart.prototype.isHidden = function isHidden(columnIndex) {\n    return this.hidden_columns[columnIndex] !== undefined;\n  };\n\n  Chart.prototype.restoreColorTo = function restoreColorTo(colors, columnIndex) {\n    debug('restoreColorTo', colors, columnIndex);\n    debug('hidden_columns', this.hidden_columns);\n    var previousColor = void 0;\n    if (this.isHidden(columnIndex)) {\n      previousColor = this.hidden_columns[columnIndex].color;\n      delete this.hidden_columns[columnIndex];\n    } else {\n      previousColor = this.getColumnColor(columnIndex - 1);\n    }\n    if (columnIndex !== 0) {\n      colors.push(previousColor);\n    }\n  };\n  // eslint-disable-next-line class-methods-use-this\n\n\n  Chart.prototype.debounce = function debounce(func, wait) {\n    var timeout = void 0;\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var context = this;\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        return func.apply(context, args);\n      }, wait);\n    };\n  };\n\n  Chart.prototype.togglePoints = function togglePoints(column) {\n    debug('togglePoints', column);\n    var view = new window.google.visualization.DataView(this.wrapper.getDataTable());\n    var columnCount = view.getNumberOfColumns();\n    var colors = []; // eslint-disable-line prefer-const\n    var columns = []; // eslint-disable-line prefer-const\n    for (var i = 0; i < columnCount; i += 1) {\n      // If user clicked on legend\n      if (i === 0) {\n        this.addSourceColumnTo(columns, i);\n      } else if (i === column) {\n        if (this.isHidden(i)) {\n          this.addSourceColumnTo(columns, i);\n          this.restoreColorTo(colors, i);\n        } else {\n          this.addEmptyColumnTo(columns, i);\n          this.hideColumn(colors, i);\n        }\n      } else if (this.isHidden(i)) {\n        this.addEmptyColumnTo(columns, i);\n        this.hideColumn(colors, i);\n      } else {\n        this.addSourceColumnTo(columns, i);\n        this.restoreColorTo(colors, i);\n      }\n    }\n    view.setColumns(columns);\n    this.props.options.colors = colors;\n    this.chart.draw(view, this.props.options);\n  };\n\n  Chart.prototype.render = function render() {\n    debug('render', this.props, this.state);\n    var divStyle = {\n      height: this.props.height || this.props.options.height,\n      width: this.props.width || this.props.options.width\n    };\n    return _react2.default.createElement(\n      'div',\n      { id: this.state.graphID, style: divStyle },\n      this.props.loader ? this.props.loader : 'Rendering Chart...'\n    );\n  };\n\n  return Chart;\n}(_react2.default.Component);\n\nexports.default = Chart;\n\n\nprocess.env.NODE_ENV !== \"production\" ? Chart.propTypes = {\n  graph_id: _react2.default.PropTypes.string,\n  chartType: _react2.default.PropTypes.string,\n  rows: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.array),\n  columns: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.object),\n  data: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.array),\n  options: _react2.default.PropTypes.any,\n  width: _react2.default.PropTypes.string,\n  height: _react2.default.PropTypes.string,\n  chartEvents: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({\n    // https://github.com/yannickcr/eslint-plugin-react/issues/819\n    eventName: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n    callback: _react2.default.PropTypes.func })),\n  chartActions: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({\n    id: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n    text: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n    action: _react2.default.PropTypes.func })),\n  loadCharts: _react2.default.PropTypes.bool,\n  loader: _react2.default.PropTypes.node,\n  legend_toggle: _react2.default.PropTypes.bool,\n  allowEmptyRows: _react2.default.PropTypes.bool,\n  chartPackages: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string),\n  chartVersion: _react2.default.PropTypes.string,\n  numberFormat: _react2.default.PropTypes.shape({\n    column: _react2.default.PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n    options: _react2.default.PropTypes.shape({\n      decimalSymbol: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n      fractionDigits: _react2.default.PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n      groupingSymbol: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n      negativeColor: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n      negativeParens: _react2.default.PropTypes.bool, // eslint-disable-line react/no-unused-prop-types\n      pattern: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n      prefix: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n      suffix: _react2.default.PropTypes.string })\n  }),\n  dateFormat: _react2.default.PropTypes.shape({\n    // eslint-disable-next-line react/no-unused-prop-types\n    columns: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.number),\n    options: _react2.default.PropTypes.shape({\n      formatType: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n      pattern: _react2.default.PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n      timeZone: _react2.default.PropTypes.number })\n  }),\n  diffdata: _react2.default.PropTypes.shape({\n    on: _react2.default.PropTypes.array, // eslint-disable-line react/no-unused-prop-types\n    off: _react2.default.PropTypes.array })\n} : void 0;\n\nChart.defaultProps = {\n  chartType: 'LineChart',\n  rows: [],\n  columns: [],\n  options: {\n    chart: {\n      title: 'Chart Title',\n      subtitle: 'Subtitle'\n    },\n    hAxis: { title: 'X Label' },\n    vAxis: { title: 'Y Label' },\n    width: '400px',\n    height: '300px'\n  },\n  width: '400px',\n  height: '300px',\n  chartEvents: [],\n  chartActions: null,\n  data: null,\n  legend_toggle: false,\n  allowEmptyRows: false,\n  loadCharts: true,\n  loader: _react2.default.createElement(\n    'div',\n    null,\n    'Rendering Chart'\n  ),\n  chartPackages: ['corechart'],\n  chartVersion: 'current',\n  numberFormat: null,\n  dateFormat: null,\n  diffdata: null\n};\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar debug = new _debug2.default('react-google-charts:GoogleChartLoader'); // GoogleChartLoader Singleton\n\n// Based on http://blog.arkency.com/2014/09/react-dot-js-and-google-charts/\n\nvar script = typeof window !== 'undefined' ? require('loadjs') : function (link, _ref) {\n  var callback = _ref.success;\n  return callback();\n};\n\nvar googleChartLoader = {\n  isLoaded: false,\n  isLoading: false,\n  initPromise: {},\n  init: function init(packages, version) {\n    var _this = this;\n\n    debug('init', packages, version);\n    console.warn({ script: script });\n    if (this.isLoading || this.isLoaded) {\n      return this.initPromise;\n    }\n    this.isLoading = true;\n    this.initPromise = new Promise(function (resolve) {\n      script('https://www.gstatic.com/charts/loader.js', { success: function success() {\n          window.google.charts.load(version || 'current', { packages: packages || ['corechart'] });\n          window.google.charts.setOnLoadCallback(function () {\n            debug('Chart Loaded');\n            _this.isLoaded = true;\n            _this.isLoading = false;\n            resolve();\n          });\n        } });\n    });\n    return this.initPromise;\n  }\n};\n\nexports.default = googleChartLoader;\nmodule.exports = exports['default'];","'use strict';\n\n// Taken from http://there4development.com/blog/2012/05/02/google-chart-color-list/\n\nmodule.exports = ['#3366CC', '#DC3912', '#FF9900', '#109618', '#990099', '#3B3EAC', '#0099C6', '#DD4477', '#66AA00', '#B82E2E', '#316395', '#994499', '#22AA99', '#AAAA11', '#6633CC', '#E67300', '#8B0707', '#329262', '#5574A6', '#3B3EAC'];","'use strict';\n\nexports.__esModule = true;\n\nvar _Chart = require('./components/Chart');\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = { Chart: _Chart2.default };\nmodule.exports = exports['default'];","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}